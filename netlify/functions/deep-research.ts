import type { Handler, HandlerEvent, HandlerResponse } from '@netlify/functions';
import { deepResearchService } from '../../src/lib/deep-research-service';
import { AilockService } from '../../src/lib/ailock/core';
import type { DeepResearchOptions, ResearchReport } from '../../src/lib/deep-research-service';

const CORS_HEADERS = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'Content-Type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

function responseWithCORS(statusCode: number, body: any): HandlerResponse {
  return {
    statusCode,
    headers: {
      'Content-Type': 'application/json',
      ...CORS_HEADERS
    },
    body: JSON.stringify(body)
  };
}

export const handler: Handler = async (event: HandlerEvent): Promise<HandlerResponse> => {
  // Handle CORS preflight
  if (event.httpMethod === 'OPTIONS') {
    return responseWithCORS(200, { message: 'Preflight request processed' });
  }

  if (event.httpMethod !== 'POST') {
    return responseWithCORS(405, { error: 'Method Not Allowed' });
  }

  try {
    const body = event.body;
    if (!body) {
      return responseWithCORS(400, { error: 'Request body is required' });
    }

    const { query, userId, options } = JSON.parse(body);

    if (!query || !userId) {
      return responseWithCORS(400, { 
        error: 'Missing required fields: query and userId' 
      });
    }

    console.log(`üîç Deep Research request for user ${userId}: "${query}"`);

    const ailockService = new AilockService();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–≤—ã–∫–∞–º–∏
    const profile = await ailockService.getOrCreateAilock(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞–≤—ã–∫–∞ Deep Research
    const deepResearchSkill = profile.skills.find(s => s.skillId === 'deep_research');
    if (!deepResearchSkill || deepResearchSkill.currentLevel === 0) {
      return responseWithCORS(403, {
        error: 'Deep Research skill not unlocked',
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –Ω–∞–≤—ã–∫ Semantic Search, –∞ –∑–∞—Ç–µ–º Deep Research.',
        requiredSkill: 'deep_research',
        currentLevel: deepResearchSkill?.currentLevel || 0
      });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Deep Research
    const defaultOptions: DeepResearchOptions = {
      maxSources: 10,
      includeAcademic: true,
      includeWeb: true,
      includePatents: false,
      language: 'ru',
      researchDepth: 'comprehensive'
    };

    const researchOptions = { ...defaultOptions, ...options };

    console.log(`üìä Starting research with skill level ${deepResearchSkill.currentLevel}`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
    const report: ResearchReport = await deepResearchService.conductResearch(
      query,
      profile.skills,
      researchOptions
    );

    // –ù–∞—á–∏—Å–ª—è–µ–º XP –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
    try {
      await ailockService.gainXp(profile.id, 'skill_used_successfully', {
        skillId: 'deep_research',
        skillLevel: deepResearchSkill.currentLevel,
        sourcesFound: report.sources.length,
        confidence: report.confidence
      });

      // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞ (—Å—á–µ—Ç—á–∏–∫ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
      
      console.log(`‚úÖ XP awarded for Deep Research usage`);
    } catch (xpError) {
      console.warn('Failed to award XP:', xpError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ XP
    }

    console.log(`üéØ Research completed: ${report.sources.length} sources, confidence: ${report.confidence}%`);

    return responseWithCORS(200, {
      success: true,
      report,
      skillLevel: deepResearchSkill.currentLevel,
      message: `–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ ${report.sources.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.`
    });

  } catch (error: any) {
    console.error('Deep Research failed:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    if (error.message.includes('not unlocked')) {
      return responseWithCORS(403, {
        error: 'Skill not available',
        message: error.message
      });
    }

    if (error.message.includes('Research failed')) {
      return responseWithCORS(500, {
        error: 'Research service error',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        details: error.message
      });
    }

    return responseWithCORS(500, {
      error: 'Internal server error',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Deep Research',
      details: error.message
    });
  }
}; 