import type { AilockInteraction } from '@/types/ailock-interactions';

export interface InboxState {
  interactions: AilockInteraction[];
  unreadCount: number;
  lastUpdate: Date;
  isLoading: boolean;
  error: string | null;
}

export class AilockInboxService {
  private static instance: AilockInboxService;
  private state: InboxState = {
    interactions: [],
    unreadCount: 0,
    lastUpdate: new Date(0),
    isLoading: false,
    error: null
  };
  
  private subscribers: Set<(state: InboxState) => void> = new Set();
  private cacheKey = 'ailock-inbox-cache';
  private refreshInterval: NodeJS.Timeout | null = null;
  private userId: string | null = null;

  static getInstance(): AilockInboxService {
    if (!AilockInboxService.instance) {
      AilockInboxService.instance = new AilockInboxService();
    }
    return AilockInboxService.instance;
  }

  private constructor() {}

  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ localStorage
  private saveToCache() {
    if (!this.userId) return;
    
    const cacheData = {
      interactions: this.state.interactions,
      unreadCount: this.state.unreadCount,
      lastUpdate: this.state.lastUpdate.toISOString(),
      timestamp: Date.now()
    };
    localStorage.setItem(`${this.cacheKey}_${this.userId}`, JSON.stringify(cacheData));
  }

  private loadFromCache(): boolean {
    if (!this.userId) return false;
    
    const cached = localStorage.getItem(`${this.cacheKey}_${this.userId}`);
    if (!cached) return false;
    
    try {
      const cacheData = JSON.parse(cached);
      const isExpired = Date.now() - cacheData.timestamp > 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
      
      if (isExpired) {
        localStorage.removeItem(`${this.cacheKey}_${this.userId}`);
        return false;
      }
      
      this.state = {
        ...this.state,
        interactions: cacheData.interactions,
        unreadCount: cacheData.unreadCount,
        lastUpdate: new Date(cacheData.lastUpdate)
      };
      
      this.notifySubscribers();
      return true;
    } catch (error) {
      console.error('Failed to load from cache:', error);
      localStorage.removeItem(`${this.cacheKey}_${this.userId}`);
      return false;
    }
  }

  private notifySubscribers() {
    this.subscribers.forEach(callback => callback(this.state));
  }

  // üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π batch –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É–∫–∏
  private async fetchInboxDataBatch(): Promise<{
    interactions: AilockInteraction[];
    unreadCount: number;
  }> {
    const response = await fetch('/.netlify/functions/ailock-batch', {
      method: 'POST',
      credentials: 'include', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP-only –∫—É–∫–∏
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        requests: [
          {
            type: 'get_inbox',
            limit: 50,
            status: undefined // Get all interactions
          }
        ]
      })
    });

    if (!response.ok) {
      throw new Error(`Batch request failed: ${response.status}`);
    }

    const batchResult = await response.json();
    
    if (!batchResult.results || batchResult.results.length === 0) {
      throw new Error('Invalid batch response format');
    }

    const inboxResult = batchResult.results[0];
    if (!inboxResult.success) {
      throw new Error(inboxResult.error || 'Failed to fetch inbox data');
    }

    return {
      interactions: inboxResult.data.interactions || [],
      unreadCount: inboxResult.data.unreadCount || 0
    };
  }

  // Fallback –∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º API –≤—ã–∑–æ–≤–∞–º —Å –∫—É–∫–∏
  private async fetchInboxDataLegacy(): Promise<InboxResponse> {
    const response = await fetch('/.netlify/functions/ailock-interaction?limit=50', {
      credentials: 'include', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP-only –∫—É–∫–∏
      headers: { 
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`Failed to fetch inbox: ${response.status}`);
    }

    return await response.json();
  }

  // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
  async backgroundRefresh(): Promise<void> {
    if (this.state.isLoading || !this.userId) return;
    
    try {
      this.state = { ...this.state, isLoading: true, error: null };
      this.notifySubscribers();
      
      let interactions: AilockInteraction[] = [];
      let unreadCount = 0;

      try {
        // Try batch API first for better performance
        const batchData = await this.fetchInboxDataBatch();
        interactions = batchData.interactions;
        unreadCount = batchData.unreadCount;
        console.log('‚úÖ Used batch API for inbox refresh');
      } catch (batchError) {
        console.warn('Batch API failed, falling back to legacy API:', batchError);
        // Fallback to legacy API
        const legacyData = await this.fetchInboxDataLegacy();
        interactions = legacyData.interactions || [];
        unreadCount = legacyData.unreadCount || 0;
      }
      
      this.state = {
        ...this.state,
        interactions,
        unreadCount,
        lastUpdate: new Date(),
        isLoading: false,
        error: null
      };
      
      this.saveToCache();
      this.notifySubscribers();
      
    } catch (error) {
      console.error('Background refresh failed:', error);
      this.state = {
        ...this.state,
        isLoading: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
      this.notifySubscribers();
    }
  }

  // –ü–∞–∫–µ—Ç–Ω–∞—è –ø–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  async markMultipleAsRead(interactionIds: string[]): Promise<void> {
    if (interactionIds.length === 0 || !this.userId) return;

    const originalState = { ...this.state };
    const originalInteractions = [...this.state.interactions];

    // ‚ú® OPTIMISTIC UPDATE: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    const updatedInteractions = this.state.interactions.map(interaction => {
      if (interactionIds.includes(interaction.id) && interaction.status === 'sent') {
        return { ...interaction, status: 'read' as const, readAt: new Date() };
      }
      return interaction;
    });
    
    const newUnreadCount = updatedInteractions.filter(i => i.status === 'sent').length;

    this.state = {
      ...this.state,
      interactions: updatedInteractions,
      unreadCount: newUnreadCount,
      error: null
    };
    
    this.saveToCache();
    this.notifySubscribers();

    // üöÄ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ñ–∏–¥–±–µ–∫
    console.log('‚úÖ Optimistic update: marked', interactionIds.length, 'messages as read');

    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    this.persistMultipleMarkAsRead(interactionIds, originalState, originalInteractions);
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
  private async persistMultipleMarkAsRead(
    interactionIds: string[], 
    originalState: InboxState, 
    originalInteractions: AilockInteraction[]
  ): Promise<void> {
    try {
      const response = await fetch('/.netlify/functions/ailock-batch', {
        method: 'POST',
        credentials: 'include', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP-only –∫—É–∫–∏
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          requests: [
            {
              type: 'multiple_mark_read',
              interactionIds
            }
          ]
        })
      });

      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}`);
      }
      
      const result = await response.json();
      const markResult = result.results?.[0];
      
      if (!markResult?.success) {
          throw new Error(markResult?.error || 'Batch mark as read operation failed.');
      }

      // ‚úÖ –£—Å–ø–µ—Ö: —Å–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
      console.log('‚úÖ Server confirmed:', markResult.data.successful, 'messages marked as read');

    } catch (error) {
      console.error('‚ùå Failed to persist mark as read, reverting optimistic update:', error);
      
      // üîÑ ROLLBACK: –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      this.state = {
          ...originalState,
          interactions: originalInteractions,
          error: 'Failed to mark messages as read. Please try again.'
      };
      this.saveToCache();
      this.notifySubscribers();

      // üì¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (typeof window !== 'undefined' && window.dispatchEvent) {
        window.dispatchEvent(new CustomEvent('inbox-error', {
          detail: { 
            message: 'Failed to mark messages as read. Changes have been reverted.',
            action: 'mark_multiple_read',
            interactionIds
          }
        }));
      }
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribe(callback: (state: InboxState) => void): () => void {
    this.subscribers.add(callback);
    callback(this.state); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
    return () => {
      this.subscribers.delete(callback);
    };
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º polling
  startAutoRefresh(intervalMs: number = 60000): void {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º smart polling —Å events endpoint
    this.refreshInterval = setInterval(() => {
      this.smartRefresh();
    }, intervalMs);
  }

  // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ events endpoint
  private async smartRefresh(): Promise<void> {
    if (!this.userId || this.state.isLoading) return;

    try {
      const response = await fetch('/.netlify/functions/ailock-events', {
        credentials: 'include', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP-only –∫—É–∫–∏
        headers: { 
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        console.warn('Smart refresh failed, falling back to full refresh');
        return this.backgroundRefresh();
      }

      const eventData = await response.json();
      
      if (!eventData.success) {
        return this.backgroundRefresh();
      }

      const { unreadCount, latestTimestamp, hasNewMessages } = eventData.data;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const needsFullRefresh = 
        hasNewMessages && 
        (!this.state.lastUpdate || new Date(latestTimestamp) > this.state.lastUpdate);
      
      if (needsFullRefresh) {
        console.log('üì© New messages detected, triggering full refresh');
        return this.backgroundRefresh();
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (this.state.unreadCount !== unreadCount) {
        this.state = { ...this.state, unreadCount };
        this.notifySubscribers();
      }

    } catch (error) {
      console.warn('Smart refresh failed:', error);
      // Fallback to full refresh on error
      this.backgroundRefresh();
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  stopAutoRefresh(): void {
    if (this.refreshInterval) {
      clearInterval(this.refreshInterval);
      this.refreshInterval = null;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  async init(userId: string): Promise<void> {
    this.userId = userId;
    this.cacheKey = `ailock-inbox-cache`;
    
    const hasCachedData = this.loadFromCache();
    
    if (!hasCachedData) {
      await this.backgroundRefresh();
    } else {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ
      this.backgroundRefresh();
    }
    
    this.startAutoRefresh();
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞
  updateUnreadCount(delta: number): void {
    this.state = {
      ...this.state,
      unreadCount: Math.max(0, this.state.unreadCount + delta)
    };
    this.notifySubscribers();
  }

  // –ü–æ–º–µ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Å –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
  markAsRead(interactionId: string): void {
    const interaction = this.state.interactions.find(i => i.id === interactionId);
    if (!interaction || interaction.status === 'read') return;

    const originalState = { ...this.state };
    const originalInteractions = [...this.state.interactions];

    // ‚ú® OPTIMISTIC UPDATE: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
    const updatedInteractions = this.state.interactions.map(i => 
      i.id === interactionId 
        ? { ...i, status: 'read' as const, readAt: new Date() }
        : i
    );

    this.state = {
      ...this.state,
      interactions: updatedInteractions,
      unreadCount: Math.max(0, this.state.unreadCount - 1),
      error: null
    };

    this.saveToCache();
    this.notifySubscribers();

    console.log('‚úÖ Optimistic update: marked message as read:', interactionId);

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤ —Ñ–æ–Ω–µ
    this.persistMarkAsRead(interactionId);
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async persistMarkAsRead(interactionId: string): Promise<void> {
    try {
      const response = await fetch('/.netlify/functions/ailock-interaction', {
        method: 'PUT',
        credentials: 'include', // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP-only –∫—É–∫–∏
        headers: { 
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ interactionId })
      });

      if (!response.ok) {
        throw new Error(`Server responded with ${response.status}`);
      }

      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.error || 'Mark as read operation failed');
      }

      console.log('‚úÖ Server confirmed: message marked as read:', interactionId);

    } catch (error) {
      console.error('‚ùå Failed to persist mark as read:', error);
      
      // –ù–µ—Ç –æ—Ç–∫–∞—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      this.state = { ...this.state, error: 'Failed to mark message as read' };
      this.notifySubscribers();
      
      // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
      setTimeout(() => {
        this.backgroundRefresh();
      }, 2000);
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
  addNewInteraction(interaction: AilockInteraction): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const exists = this.state.interactions.find(i => i.id === interaction.id);
    if (exists) return;

    this.state = {
      ...this.state,
      interactions: [interaction, ...this.state.interactions],
      unreadCount: interaction.status === 'sent' ? this.state.unreadCount + 1 : this.state.unreadCount,
      lastUpdate: new Date()
    };

    this.saveToCache();
    this.notifySubscribers();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  getState(): InboxState {
    return { ...this.state };
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ logout
  cleanup(): void {
    this.stopAutoRefresh();
    this.subscribers.clear();
    this.state = {
      interactions: [],
      unreadCount: 0,
      lastUpdate: new Date(0),
      isLoading: false,
      error: null
    };
    
    if (this.userId) {
      localStorage.removeItem(`${this.cacheKey}_${this.userId}`);
    }
    
    this.userId = null;
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Legacy API –æ—Ç–≤–µ—Ç–∞
interface InboxResponse {
  interactions: AilockInteraction[];
  unreadCount: number;
  hasMore?: boolean;
  nextCursor?: string | null;
} 