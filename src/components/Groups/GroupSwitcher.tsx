import React, { useState, useEffect } from 'react';
import { useStore } from '@nanostores/react';
import { useAuth } from '@/hooks/useAuth';
import { useUserSession } from '@/hooks/useUserSession';
import useNotifications from '@/hooks/useNotifications';
import type { Notification } from '@/hooks/useNotifications';

// –¢–∏–ø—ã –¥–ª—è –≥—Ä—É–ø–ø
interface Group {
  id: string;
  name: string;
  type: 'family' | 'team' | 'friends';
  description?: string;
  status: string;
  created_at: Date;
  members_count?: number;
  user_role?: 'owner' | 'admin' | 'member' | 'guest';
  unread_count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  new_intents_count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
  invites_count?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
function useGroups() {
  const [groups, setGroups] = useState<Group[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeGroupId, setActiveGroupId] = useState<string | null>(null);
  const { user: authUser } = useAuth();
  const { currentUser } = useUserSession();
  const displayUser = authUser || currentUser;
  const { notifications, getUnreadCountForGroup } = useNotifications();

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchGroups = async () => {
    setLoading(true);
    setError(null);

    try {
      if (!displayUser?.id) {
        throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const response = await fetch('/.netlify/functions/ailock-batch', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({
          requests: [
            {
              type: 'get_user_groups'
            }
          ]
        }),
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã');
      }

      if (data.results && data.results[0] && data.results[0].data && data.results[0].data.groups) {
        // –û–±–æ–≥–∞—â–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
        const enrichedGroups = data.results[0].data.groups.map((group: Group) => {
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
          const unreadMessages = notifications.filter(
            (n: Notification) => n.type === 'message' && n.groupId === group.id && !n.read
          ).length;
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º getUnreadCountForGroup –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
          return {
            ...group,
            members_count: group.members_count || 0,
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –±–µ–π–¥–∂–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ useNotifications
            unread_count: getUnreadCountForGroup(group.id, 'message'),
            new_intents_count: getUnreadCountForGroup(group.id, 'intent'),
            invites_count: getUnreadCountForGroup(group.id, 'invite')
          };
        });
        setGroups(enrichedGroups);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é
        if (enrichedGroups.length > 0 && !activeGroupId) {
          setActiveGroupId(enrichedGroups[0].id);
        }
      } else {
        setGroups([]);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø:', err);
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã
  const fetchGroupDetails = async (groupId: string) => {
    try {
      if (!displayUser?.id) {
        throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const response = await fetch('/.netlify/functions/ailock-batch', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify({
          requests: [
            {
              type: 'get_group_details',
              groupId
            }
          ]
        }),
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≥—Ä—É–ø–ø—ã');
      }

      return data.results?.[0]?.data;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –≥—Ä—É–ø–ø—ã:', err);
      throw err;
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≥—Ä—É–ø–ø—É
  const switchToGroup = async (groupId: string) => {
    setActiveGroupId(groupId);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Ç–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —á–ª–µ–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  useEffect(() => {
    if (displayUser?.id) {
      fetchGroups();
    }
  }, [displayUser?.id, notifications.length]);

  return {
    groups,
    loading,
    error,
    activeGroupId,
    fetchGroups,
    fetchGroupDetails,
    switchToGroup
  };
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø
export function GroupSwitcher() {
  const {
    groups,
    loading,
    error,
    activeGroupId,
    switchToGroup
  } = useGroups();

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ –≥—Ä—É–ø–ø—ã
  const renderGroupTypeIcon = (type: 'family' | 'team' | 'friends') => {
    switch (type) {
      case 'family':
        return <span className="text-red-500">üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>;
      case 'team':
        return <span className="text-blue-500">üë•</span>;
      case 'friends':
        return <span className="text-green-500">ü§ù</span>;
      default:
        return <span className="text-gray-500">üë•</span>;
    }
  };

  if (loading && groups.length === 0) {
    return (
      <div className="p-3 text-sm text-center text-gray-500">
        –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...
      </div>
    );
  }

  if (error && groups.length === 0) {
    return (
      <div className="p-3 text-sm text-center text-red-500">
        –û—à–∏–±–∫–∞: {error}
      </div>
    );
  }

  if (groups.length === 0) {
    return (
      <div className="p-3 text-sm text-center text-gray-500">
        –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø
      </div>
    );
  }

  return (
    <div className="group-switcher">
      <h3 className="text-sm font-semibold px-3 py-2 text-gray-700">–ú–æ–∏ –≥—Ä—É–ø–ø—ã</h3>
      <ul className="space-y-1">
        {groups.map((group) => (
          <li 
            key={group.id}
            className={`
              flex items-center px-3 py-2 text-sm rounded-lg cursor-pointer
              ${activeGroupId === group.id ? 'bg-indigo-100 text-indigo-900' : 'hover:bg-gray-100 text-gray-700'}
            `}
            onClick={() => switchToGroup(group.id)}
          >
            <span className="mr-2">{renderGroupTypeIcon(group.type)}</span>
            <span className="truncate">{group.name}</span>
            
            {/* –ë–µ–π–¥–∂–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π */}
            {group.unread_count ? (
              <span className="ml-2 flex-shrink-0 h-5 min-w-[20px] flex items-center justify-center text-xs bg-red-500 text-white rounded-full px-1">
                {group.unread_count}
              </span>
            ) : null}
            
            {/* –ë–µ–π–¥–∂–∏ –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤ */}
            {group.new_intents_count ? (
              <span className="ml-1 flex-shrink-0 h-5 min-w-[20px] flex items-center justify-center text-xs bg-green-500 text-white rounded-full px-1">
                {group.new_intents_count}
              </span>
            ) : null}
            
            {/* –ë–µ–π–¥–∂–∏ –Ω–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤/–∞–¥–º–∏–Ω–æ–≤ */}
            {(group.user_role === 'owner' || group.user_role === 'admin') && group.invites_count ? (
              <span className="ml-1 flex-shrink-0 h-5 min-w-[20px] flex items-center justify-center text-xs bg-blue-500 text-white rounded-full px-1">
                {group.invites_count}
              </span>
            ) : null}
            
            {/* –ú–∞—Ä–∫–µ—Ä —Ä–æ–ª–∏ */}
            {group.user_role === 'owner' && (
              <span className="ml-auto text-xs bg-indigo-100 text-indigo-800 px-1.5 py-0.5 rounded">
                –≤–ª–∞–¥–µ–ª–µ—Ü
              </span>
            )}
            {group.user_role === 'admin' && (
              <span className="ml-auto text-xs bg-blue-100 text-blue-800 px-1.5 py-0.5 rounded">
                –∞–¥–º–∏–Ω
              </span>
            )}
          </li>
        ))}
      </ul>
      <div className="mt-3 px-3">
        <button
          className="w-full flex items-center justify-center px-3 py-1.5 text-sm text-white bg-indigo-600 rounded-lg hover:bg-indigo-700"
        >
          <span className="mr-1">+</span> –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
        </button>
      </div>
    </div>
  );
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ö—É–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { useGroups };
